<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
 		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
	<!-- 加载Properties文件 -->
	<!-- <bean id="configurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations"> <list> <value>classpath:email.properties</value> 
		</list> </property> </bean> -->

	<mvc:view-controller path="/" view-name="redirect:user/login" />

	<aop:aspectj-autoproxy />
	<!-- 注解探测器（组件扫描）@Controller -->
	<context:component-scan base-package="com.java.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- 启动springMVC的注解功能，他会自动注册HandlerMapping,HandlerAdapter,ExceptionResolver的相关实例 -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />
			</bean>
			<ref bean="mappingJacksonHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- enable autowire -->


	 <mvc:view-controller path="/" view-name="redirect:user/login"/><!--设置默认的主页 -->

	<!-- 处理JSON数据转换的 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<!-- 为了处理返回的JSON数据的编码，默认是ISO-88859-1的，这里把它设置为UTF-8,解决有乱码的情况 -->
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>


	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP -->
	<!-- 默认的视图解析器在上边的解析错误时使用 (默认使用html)- -->

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/" p:suffix=".jsp" />


	<!--由于web.xml中设置是由springMVC拦截所有请求，于是在读取静态资源文件的时候就会受到影响（说白了就是读不到） 经过下面的配置，该标签的作用就是所有页面中引用/css/**的资源，都会从/resources/styles/ 
		里面查找 -->
	<mvc:resources mapping="/logs/**" location="/logs/" />
	<mvc:resources mapping="/file/**" location="/file/" />
	<mvc:resources mapping="/assets/**" location="/WEB-INF/assets/" />
	<mvc:resources mapping="/FileUpload/**" location="/WEB-INF/FileUpload/" />

	<!--由于web.xml中设置是由springMVC拦截所有请求，于是在读取静态资源文件的时候就会受到影响（说白了就是读不到） 经过下面的配置，该标签的作用就是所有页面中引用/css/**的资源，都会从/resources/styles/ 
		里面查找 -->
	<!-- <mvc:resources mapping="/logs/**" location="/logs/" /> <mvc:resources 
		mapping="/file/**" location="/file/" /> <mvc:resources mapping="/assets/**" 
		location="/WEB-INF/assets/"/> -->
	<!-- 拦截器 -->

	<!-- 多个拦截器,顺序执行 -->
	<!-- 如果不配置或/*,将拦截所有的Controller -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/*" />
			<mvc:mapping path="/*/*" />
			<mvc:exclude-mapping path="/user/login" />
			<mvc:exclude-mapping path="/user/loginToIndex" />
			<mvc:exclude-mapping path="/init/toinitPage" />
			<mvc:exclude-mapping path="/init/toInit" />
			<mvc:exclude-mapping path="/authCode/getGifCode" />
			<bean class="com.java.interceptor.LoginInterceptor">
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- set the max upload size 100M -->
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>1024000</value>
		</property>
	</bean>

	<!-- <bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage"> 
		<property name="from"> <value>${email.from}</value> </property> 查看SimpleMailMessage源码还可以注入标题,内容等 
		</bean> -->
	<!-- 申明JavaMailSenderImpl对象 -->
	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
		<property name="defaultEncoding" value="UTF-8" /> <property name="host" value="${email.host}" 
		/> <property name="username" value="${email.username}" /> <property name="password" 
		value="${email.password}" /> <property name="javaMailProperties"> <props> 
		设置认证开关 <prop key="mail.smtp.auth">true</prop> 启动调试开关 <prop key="mail.debug">true</prop> 
		设置发送延时 <prop key="mail.smtp.timeout">0</prop> </props> </property> </bean> -->
	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl" 
		scope="singleton"> <property name="host" value="smtp.163.com" /> <property 
		name="port" value="25" /> <property name="protocol" value="smtp" /> <property 
		name="username" value="G631233828@163.com" /> <property name="password" value="G631233828" 
		/> <property name="javaMailProperties"> <props> <prop key="mail.smtp.auth">true</prop> 
		</props> </property> </bean> ②异步线程执行器 <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"> 
		<property name="corePoolSize" value="10" /> <property name="maxPoolSize" 
		value="30" /> </bean> -->



</beans>